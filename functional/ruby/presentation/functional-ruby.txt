================================
Functional Programming with Ruby
================================

.. class:: big 

  *One lambda to rule them all*

Arnau Sanchez <tokland@gmail.com>


Introduction (1)
================

.. class:: center huge

  x = x + 1 

.. class:: center incremental

  x - x = 1 
  
  0 = 1  

.. class:: incremental 
 
.. image:: pics/picard-facepalm.jpg
  :height: 300
  :align: center
  
Introduction (2)
================

But isn't this a minor detail? We all know "x" is not a value here but a variable!

We have business to run here! 

Let the loony bearded guys deal with it!! 

.. class:: center

.. image:: pics/ritchie-thompson.jpg
  :height: 300
  :align: center  

No, it's important, I'll try to show you why.

Functional Programming: a bit of history
========================================

* Lambda calculus (Î»-calculus): Alonzo Church in the 30s formalized mathematical constructs using only functions.
* Lisp: John McCarthy in the late 50's, very influenced by lambda calculus.
* ML-family: Developed in the 70's.
* FP: Language developed by John Backus (1977).
* Haskell: Pure functional, open standard for Functional Programming research (1987).
* Erlang, Clojure, Scala, ... 

Functional Programming: the theory
==================================

* No mutable data (no side effects). 
* No state (no implicit, hidden state).

Once assigned (value binding), a "variable" (a symbol) doesn't change its value.

.. image:: pics/functional-programming-joke.png
  :height: 300
  :align: center

Functional Programming: state
=============================

.. class:: center

    *State is the root of all evil.*

.. image:: pics/anarchy.jpg
  :height: 200
  :align: center

* All state is bad? no, **hidden**, **implicit** state is bad.
* Functional programming does not eliminate state, it makes it **visible** and **explicit** (at least when the programmers wants it to be).

That's all there is? but what comes of it?

Referential transparency (1)
============================

* Functions are *pure* functions in the mathematical sense: their output depend only in their inputs, there is no "environment".
* Therefore we'll have the same output for calls with the same parameters.
* This allow cool things as:

  * **Memoization**: Speed up computation by saving results for previous function calls.
  * **Idempotence**: Same result regardless how many times you call a function.

Referential transparency (2) 
============================

**Insanity**: *Doing the same thing over and over again and expecting different results*.

.. image:: pics/einstein.jpg
  :height: 400
  :align: center  

Parallelization
===============
  
* Function calls are independent.
* We can parallelize in different processes/CPUs/computers/...

.. sourcecode:: ruby

  result = fun1(a, b) + fun2(a, c)
  
We can execute *fun1* and *fun2* in parallel (*a* won't be modified)

Concurrence
===========

With no shared data, concurrence gets a lot simpler:

  * No semaphores
  * No monitors
  * No locks
  * No race-conditions
  * No dead-locks

Easier debugging
================

* If you have global state:

  * Functions depend on their inputs and the whole state. Hard to debug.
  * When things go awry, you cannot see the evolution of values (old data was probably overriden)

* In functional programming:

  * Functions can be tested in isolation.
  * The steps in computation can be easily followed. 

Modularity and composition
==========================

Global state spreads complexity all over the code base. Instead, you should use take advantage of:

* *Modularity*: Light coupling between modules.
* *Compositionality*: Easy to connect modules and make them work cooperatively.
* *Bottom-up programming*: Write the base elements first and go up in the abstraction layer.

  *"Programming is building abstractions and expressing ideas"* Hal Abelson 

Write better code!
==================
 
*All right... all right... but apart from referential transparency, parallelization, easier debugging and modularization... what has Functional Programming ever done for us?*
 
.. image:: pics/romans.jpg
  :height: 300
  :align: center  

.. class:: incremental

You'll write more elegant, concise, easier to understand, maintainable code. Let's see how.  

But seriously, functional programming in Ruby?
==============================================

* Ok, Ruby is an imperative language...
* ...But we still can apply functional principles.
* In Ruby you cannot assure immutability, it's basically a programmer's choice.

Don't update, create
====================

* Use persistent data structures.
* If you need to change an object, don't modify it in-place, create a new one.
  
Don't update, create: strings
=============================

No (even if that's a name rebind and not a real update):

.. sourcecode:: ruby

  movie = "The Apartment"
  movie = "#{movie} (by Billy Wilder)"
  movie = "[1960] #{movie}"
  # "[1960] The Apartment (by Billy Wilder)"
  
Yes:

.. sourcecode:: ruby

  movie = "The Apartment"
  movie_with_director = "#{movie} (by Billy Wilder)"
  complete_movie = "[1960] #{movie_with_director}"
  # "[1960] The Apartment (by Billy Wilder)"
   
Don't update, create: arrays
============================

No:

.. sourcecode:: ruby

  years = [2000, 2001]
  ...
  years << 2002
  years += [2003, 2004]
  years # [2000, 2001, 2002, 2003, 2004]

Yes:

.. sourcecode:: ruby

  years = [2000, 2001]
  ...
  all_years = years + [2003] + [2003, 2004] 
  # [2000, 2001, 2002, 2003, 2004]

Don't update, create: hashes
============================

No:

.. sourcecode:: ruby

  ages = {"John" => 30}
  ...
  ages["Mary"] = 28
  ages # {"John" => 30, "Mary" => 28}
  
Yes:

.. sourcecode:: ruby

  ages = {"John" => 30}
  ...
  all_ages = ages.merge("Mary" => 28)
  # {"John" => 30, "Mary" => 28}
  
Blocks as higher-order functions (1)
====================================

* In FP functions are first-class values: you pass them around the same way you pass *normal* values.
* In Ruby we have a wired-in mechanism to send functions: *blocks*
* Functions/methods are not first-class citizens in Ruby, blocks are.

.. sourcecode:: ruby

  write_block = proc do |file| 
    file.write("hello") 
  end
  open("file.txt", &write_block)

Which of course we'd write this way:

.. sourcecode:: ruby

  open("file.txt") do |file|
    file.write("hello")
  end

Blocks as higher-order functions (2)
====================================

* You can also return functions (well, blocks):

.. sourcecode:: ruby

  def get_adder(value)
    proc { |x| x + value }
  end
  
  adder5 = get_adder(5)
  adder5.call(2) # 7
  adder5.call(4) # 9

Blocks as higher-order functions (3)
====================================

* Variables hold *values*, functions hold *behaviours*.
* Think of a function just like another type:

.. sourcecode:: ruby

  a = 12 # a :: Integer
  b = 12.3 # b :: Float
  c = 'hello" # c :: String
  d = [1, 'hi', 32.1] # d :: Array
  
.. sourcecode:: ruby

  p = proc { |a, b| a + b } # p :: [Numeric, Numeric] -> Numeric

.. sourcecode:: ruby

  class Car
    def collision?(other_cars)
      # ...
    end
  end 
  # Car#collision? :: [Car] -> Boolean

Higher-order functions: map
===========================

No:

.. sourcecode:: ruby

  output = []
  [1, 2, 3, 4].each do |x|
    output << x * 2 
  end
  output # [2, 4, 6, 8]
  
Yes:

.. sourcecode:: ruby

  output = [1, 2, 3, 4].map do |x|
    x * 2 
  end # [2, 4, 6, 8]
  
Higher-order functions: select
==============================

No:

.. sourcecode:: ruby

  output = []
  [1, 2, 3, 4].each do |x|
    output << x if x > 2
  end
  output # [3, 4]
  
Yes:

.. sourcecode:: ruby

  output = [1, 2, 3, 4].select do |x|
    x > 2
  end # [3, 4]

Higher-order functions: detect
==============================

No:

.. sourcecode:: ruby

  output = nil
  [1, 2, 3, 4].each do |x|
    if x > 2
      output = x
      break
    end
  end
  output # 3
  
Yes:

.. sourcecode:: ruby

  output = [1, 2, 3, 4].detect do |x|
    x > 2
  end # 3
  
Higher-order functions: inject
==============================

No:

.. sourcecode:: ruby

  total = 0
  [1, 2, 3, 4].each do |x|
    total += x
  end
  total # 10

Yes:

.. sourcecode:: ruby

  total = [1, 2, 3, 4].inject(0) do |acc, x| 
    acc + x
  end # 10

For simple cases like this:

.. sourcecode:: ruby

  total = [1, 2, 3, 4].inject(0, :+)
  
Higher-order functions: zip
===========================

No:

.. sourcecode:: ruby

  xs = [1, 2, 3]
  ys = [:a, :b, :c]
  output = []
  0.upto(xs.length - 1).each do |idx|
    output << [xs[idx], ys[idx]]
  end
  output #=> [[1, :a], [2, :b], [3, :c]] 
      
Yes:

.. sourcecode:: ruby

  xs = [1, 2, 3]
  ys = [:a, :b, :c]
  output = xs.zip(ys) #=> [[1, :a], [2, :b], [3, :c]] 

Higher-order functions: each_xyz
================================

* Ruby's *Enumerable* has some nice methods originally designed for imperative usage. For example, *Enumerable#each_cons*:

.. sourcecode:: ruby

  pairwise_sums = []
  [1, 2, 3, 4].each_cons(2) do |x, y|
    pairwise_sums << x + y
  end
  pairwise_sums #=> [3, 5, 7] 
  
However, since 1.8.7 we can use them functionally, calling them without a block:

.. sourcecode:: ruby

  pairwise_sums = [1, 2, 3, 4].each_cons(2).map do |x, y|
    x + y
  end #=> [3, 5, 7] 

Example: Enumerable to hash
===========================

Compare:

.. sourcecode:: ruby

  values = ["ride", "the", "dragon"]
  lengths = {}
  values.each do |string|
    lengths[string] = string.length
  end
  lengths #=> {"ride" => 4, "the" => 3, "dragon" => 6}

With Facets' mash:
  
.. sourcecode:: ruby

  ["ride", "the", "dragon"].mash { |s| [s, s.length] }
  #=> {"ride" => 4, "the" => 3, "dragon" => 6}

Write your own extensions and improve them while you use them in your projects.

Higher-order functions: each
============================

* *Enumerable#each* is the usual imperative *for*-loop found in every imperative language.
* It returns nothing (well, in Ruby returns the enumerable itself), so it does something, it does through side-effects.
* Use only to perform real side-effects (write a file, access to DB, and so on) 

.. sourcecode:: ruby

  [1, 2, 3].each do |x| 
    # Write some nasty side-effect here
  end

Memoization (1)
===============

* Thanks to referential transparency we can save previous results.
* Lots of gems: *memoize*, *simple-memoize*, *sometimes-memoize*, *dirty-memoize*, ...

.. sourcecode:: ruby

  module Math
    def self.fibs(n)
      n <= 1 ? n : fibs(n - 1) + fibs(n - 2)
    end
  end

  p Math::fibs(35)

.. sourcecode:: bash

  $ time ruby fib.rb
  14930352

  real	0m19.852s

Memoization (2)
===============

Using *simple_memoize*:

.. sourcecode:: ruby

  require 'simple_memoize' # https://github.com/tokland/simple_memoize 

  module Math
    def self.fibs(n)
      n < 2 ? 1 : fibs(n - 1) + fibs(n - 2)
    end
    cmemoize :fibs
  end

  p Math::fibs(35)

.. sourcecode:: bash

  $ time ruby fib.rb
  14930352

  real	0m0.017s
  
Narrow down the scope by immutability
=====================================

.. sourcecode:: ruby

  @title = "The apartment"
  # 20 lines of code here
  render(@title)
  
If you don't honor immutability, what's the value of *@title* when *render* is called? Easy: 

* Check these 20 lines, maybe *@title* was changed there.
* And now... check (recursively) **all** the code called in this fragment to see if *@title* was modified somewhere, why, and under which conditions. Happy debugging!

Recursion (1)
=============

* Purely functional languages have no imperative for-loops, so they use recursion a lot. 
* If every recursion created an stack, it would blow up very soon. 
* Tail-call optimization (TCO) avoids creating a new stack when the last call in a recursion is the function itself.
* TCO is optional in Ruby: you cannot rely on it in your code if you want to use it everywhere.

Recursion (2)
=============

To enable TCO in MRI-1.9
 
.. sourcecode:: ruby

  RubyVM::InstructionSequence.compile_option = {
    :tailcall_optimization => true,
    :trace_instruction => false,
  }
  
Simple example:

.. sourcecode:: ruby

  module Math
    def self.factorial_tco(n, acc=1)
      n < 1 ? acc : factorial_tco(n-1, n*acc)
    end
  end 

Recursion (3)
=============

* You still can use it when the recursion-depth is very unlikely to be large.

.. sourcecode:: ruby

  class Node
    has_many :children, :class_name => "Node"
    
    def all_children
      self.children.flat_map do |child|
        [child] + child.all_children
      end
    end
  end
  
* Or build abstractions that capture the intent of a recursion (like `inject` does)
  
Everything is an expression (1)
===============================

.. sourcecode:: ruby

  if found_dog == our_dog 
    name = found_dog.name
    message = "We found our dog #{name}!"
  else
    message = "No luck"
  end

Control structures (*if*, *while*, *case*, ...) in Ruby also return an expression, let's take advantage of it.

Everything is an expression (2)
===============================

.. sourcecode:: ruby

  message = if found_dog == our_dog
    name = found_dog.name
    "We found our dog #{name}!"
  else
    "No luck"
  end

* We don't repeat variable names unnecessarily.
* The intent is much more clear: concentrate on what the snippet returns and forget about the incidental.
* Again, we are narrowing down the scope of our code.

Everything is an expression (3)
===============================

FP code, being expressions, can be used to build data:

.. sourcecode:: ruby

  {
    :name => "M.Cassatt",
    :paintings => paintings.select { |p| p.author == "M.Cassatt" },
    :birth => painters.detect { |p| p.name == "M.Cassatt" }.birth.year,  
    ...  
  }

Lazy evaluation
===============

* *Eager evaluation*: expressions are calculated at the moment (when variable is assigned,  function called, ...).
* *Lazy evaluation*: delays the evaluation of the expression until it's needed.
* *Memory efficient*: no memory used to store complete structures.
* *CPU efficient*: no need to calculate the complete result before returning.
* Laziness is not a requisite for FP, but it's a strategy that fits nicely on the paradigm (Haskell).

Lazy enumerators 
================

* Ruby uses eager evaluation (but short-circuits && or ||).
* Ruby blocks are a mechanism for lazy evaluation.
* Ruby arrays are not lazy, use *enumerators* when necessary.

In Ruby 2.0:

.. sourcecode:: ruby

   >> (0..Float::INFINITY).lazy.map { |x| 2*x }.take(5).to_a
   #=> [0, 2, 4, 6, 8] 

Example
=======

"What's the sum of the first 10 natural number whose square value is divisible by 5?"

Imperative:

.. sourcecode:: ruby

  n, num_elements, sum = 1, 0, 0
  while num_elements < 10
    if n**2 % 5 == 0
      sum += n
      num_elements += 1
    end
    n += 1
  end
  sum #=> 275

Functional:

.. sourcecode:: ruby

  Integer::natural.select { |x| x**2 % 5 == 0 }.take(10).inject(:+) #=> 275
  
Programming paradigms: Imperative
=================================

* Imperative programming: focus on **how**.
* Declarative (logic/dataflow/functional/...) programming: focus on **what**.

A schemer (*arcus*) once said:

  Functional programming is like describing your problem to a mathematician. Imperative programming is like giving instructions to an idiot.

Programming paradigms: FP in OOP? (1)
=====================================

John Armstrong (creator of Erlang) talks in *"Coders at Work"* about the reusability of code in FP:

  "*The problem with OO languages is theyâve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.*"

.. class:: center incremental

.. image:: pics/gorilla.jpg
  :height: 250
  :align: center
  
Programming paradigms: FP in OOP? (2)
=====================================

So we cannot do FP in OOP? Yes, we can!

* OOP is orthogonal to FP.
 
* Well, at least in theory, because:

  * Typical OOP tends to emphasize change of state in objects. 
  * Typical OOP tends to impose tight coupling between layers (which hinders modularization).
  * Typical OOP mixes the concepts of identity and state.
  * Mixture of data and code raises both conceptual and practical problems. 
  
* OOP functional languages: Scala, F#, ...

Efficiency
==========

* Functional programming is very efficient... in functional programming languages.
* Why? because they can take for granted all the cool things we've talked about (persistent data-structures, referential transparency, ...). Ruby cannot.
* However, it's unlikely that the functional snippets in your Ruby code are the bottleneck of the application (usually: network, database, disk, ill-thought algorithms...).
* First write readable, maintainable code and only after profiling worry about efficiency. 

Breaking the law (1): Why
=========================

* Efficiency: You need to update big structures a lot.
* Intricate code: You cannot figure out a clean implementation (it's preferable good imperative than bad functional).
* State: You must keep state but cannot use recursion due to the uncertainty about TCO.

.. image:: pics/judas-breaking-the-law.jpg
  :height: 250
  :align: center

Breaking the law (2): Where
===========================

* At low-level: Example with *Enumerable#mash*: 

.. sourcecode:: ruby

  module Enumerable
    def mash(&block)
      output = {}
      each do |x|
        k, v = yield(x)
        output[k] = v
      end
      output
    end
  end

* At high-level (but make it explicit):

.. sourcecode:: ruby

  updated_player = @player.next_state
  @player = updated_player

We get it, FP is cool but... (1)
================================

... why imperative languages still rule the galaxy?!

  Is the imperative programming stronger? 
  No, no, no. Only quicker, easier, more seductive.

.. class:: center incremental

.. image:: pics/yoda-lambda.png
  :height: 400
  :align: center 

We get it, FP is cool but... (2)
================================

... why is it harder to understand?!

  Be a craftsman: Take your time to master the tools of your trade (and later build your own).

.. image:: pics/violinmaker.jpg
  :height: 300
  :align: center
  
Advice: learn at least one functional language
==============================================

* Haskell
* ML (Standard ML, Objective Caml, ...)
* Scheme
* Erlang
* Scala
* Clojure
* F#
 
Thanks for coming!
==================

.. class:: center big

Arnau Sanchez (*tokland*)

.. class:: center 

Software freelance developer.

.. image:: pics/tokland.jpg
  :height: 200
  :align: center
  
**Email**: tokland@gmail.com
 
**Professional page**: http://www.arnau-sanchez.com/en

**Free projects and writings**: http://code.google.com/p/tokland/

Share this!
===========

  Creative Commons Attribution 3.0

.. image:: pics/license-cc.png
  :height: 100
  :align: center

- Feel free to use all the text and code of the presentation. 

- Note that the images belong to their original authors, none of them are mine (the jungle and the gorilla is a collage, and so is the Yoda with the lambda lightsaber, in case you didn't notice ;-)).

- The idea of beginning with the "expression" *x = x + 1*  was taken from Luca Bolognese's great presentation "An Introduction to Microsoft F#". Check it out!
