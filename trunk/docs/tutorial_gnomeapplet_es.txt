Programación de applets en Gnome
================================

.{date}: Primera versión enviada a Dotpy
************************************************************************
- Clase 'GnomeApplet'
- Dos ejemplos de uso
- Configuración de Bonobo

mailto:arnau@ehas.org['Arnau Sanchez']
************************************************************************

Introducción
------------
Una de las grandes ventajas del universo Unix es su extraordinaria
variedad. Es habitual que no haya un único programa para una tarea, sino
varios. Aunque algunos lo vean como un inconveniente, no es más que el
resultado natural de una comunidad heterogénea con gustos y necesidades
distintos. Al final, los beneficiados son usuarios y desarrolladores,
que pueden emplear el software o las bibliotecas más adecuadas en cada
momento.

Los entornos de escritorio no son una excepción: hay muchos, decenas de
ellos. Con el tiempo, sin embargo, parece que han acabado siendo 
link:http://www.gnome.org[Gnome] y link:http://kde.org[KDE] (y link://http://xfce.org[Xfce] 
algo por detrás) los dos escritorios más populares. Si no se
está limitado en CPU, espacio de disco o RAM (y es que tanto Gnome como
KDE son voraces devoradores de recursos), ambos son una buena elección.

Esta variedad requiere a menudo del programador que domine una gama
de bibliotecas en función del escritorio al que vaya destinadas sus
aplicaciones. En este tutorial presentaremos una programación de un
applet (también conocidos como iconos del 'Systray' en Windows) para Gnome
empleando Python y PyGTK.

Requisitos
----------
Necesitaremos Gnome instalado, por supuesto. Por su filosofía y
versatilidad, soy un entusiasta de link:http://www.debian.org[Debian] y derivados, pero naturalmente
servirá cualquier otra distribución GNU/Linux o BSD. Si tenemos Debian
(o http://www.ubuntu.com[Ubuntu], que para el caso da igual), sólo necesitamos el paquete que
incluye el módulo 'gnomeapplet' ('apt-get install python-gnome2-desktop').

Comprobemos que el paquete está instalado correctamente:

-----------------------------------
~$ python 
>>> import gnomeapplet 
>>> dir(gnomeapplet) ['Applet',
'COLOR_BACKGROUND', 'EXPAND_MAJOR', 'EXPAND_MINOR', 'HAS_HANDLE',
'NO_BACKGROUND', 'ORIENT_DOWN', 'ORIENT_LEFT', 'ORIENT_RIGHT',
'ORIENT_UP', 'PIXMAP_BACKGROUND', 'SIZE_LARGE', 'SIZE_MEDIUM',
'SIZE_SMALL', 'SIZE_XX_LARGE', 'SIZE_XX_SMALL', 'SIZE_X_LARGE',
'SIZE_X_SMALL', '__doc__', '__file__', '__name__', 'bonobo_factory',
'factory_main']
-----------------------------------

Después, descargad la última versión de 'gnomeapplet-version.tgz' que encontréis
en este link:http://code.google.com/p/tokland/downloads/list[repositorio ] de google.

La clase 'GnomeApplet'
--------------------

Gnome usa GTK+ ('The GIMP Toolkit'), una herramienta inicialmente
desarrollada para el programa de dibujo Gimp y después adoptada por
Gnome como biblioteca de creación de interfaces (GUI). Desde Python
podemos acceder gracias al trabajo del proyecto link:http://www.pygtk.org/[PyGTK].

GTK (y por tanto su 'wrapper' PyGTK) es una biblioteca muy potente. Eso
es estupendo porque te da un control fino sobre tu aplicación, pero
por momentos puede ser agotador que programas en apariencia sencillos
requieran finalmente cientos de líneas. Al final, eso tampoco es un
problema: cuando haces dos o tres applets con PyGTK, te acabas dando
cuenta que el esqueleto es casi idéntico, y es obvio que la repetición
de código es una señal de que necesitamos de modularizar. Si elegimos un
enfoque basado en programación orientada a objetos, esto se traduce en
la creación de una clase padre que usaremos de base para nuestras clases.

Con una aproximación de este tipo debes tener claro qué nivel de
abstracción quieres manejar, ni muy alto (con lo cual el applet sería
poco versátil), ni muy bajo (para este viaje no se necesitaban alforjas:
nos hubiéramos quedado con 'gnomeapplet/GTK' y listo). La clase 'GnomeApplet',
cubre las necesidades básicas para applets sencillos. A las malas, sirva
al menos como ejemplo de cómo interacturar con el módulo 'gnomeapplet'.

A falta de un Makefile, copiad a mano los scripts a '/usr/local/bin', las
imágenes PNG a '/usr/local/share/pixmaps' y el fichero de configuración
'GNOME_ClockExampleApplet.server' a '/usr/lib/bonobo/servers'.

Las características básicas de la clase 'GnomeApplet' son:

- Funciona en modo de pruebas (en una ventana) o modo 'applet' (en el
panel).  
- Imágenes con su correspondiente texto de información contextual (hint).  
- Botón derecho de acceso al menú.  
- Los items del menú pueden
ser activados o desactivados (para entendernos, se puede modificar
la propiedad 'sensitive') 
- Función de callback por temporizador.  
- Función para mostrar la ventana 'About' (Acerca de)

He intentado que el código de la clase sea lo más claro posible, aún
así ahí van algunos apuntes:

- No soy un amante de los prefijos '__' (más que nada porque ensucian
el código), pero en casos como éste, donde estamos haciendo una clase
padre, evitamos que aparezcan variables y métodos internos en las objetos
finales. Así, sólo las funciones públicas son visibles y el interfaz es
más claro.

- La oscura función '__panel_bg' se encarga de las transparencias en
el applet. Está copiada casi literalmente de otros applets, ni idea de
quién es el autor original.

- Los objetos 'AppletImage' es realmente un 'gtk.Image' dentro de un
'gtk.EventBox'. Esto es necesario porque un 'gtk.Image' no tiene una ventana
X asociada, por lo que sería incapaz de recibir eventos del ratón ni de
mostrar información al situarnos encima. Las funciones más comunes están
definidas explícitamente ('show', 'hide', 'connect_signal'); para un control
directo a los objetos GTK, se puede acceder a las variables 'event_box'
e 'image'.

Ejemplo 1: Nuestro primer applet
--------------------------------

En el primer ejemplo ('example1.py'), heredada de la clase 'GnomeApplet',
llamamos al constructor original, añadimos la imagen del reloj y
establecemos una función que se llamará cada segundo. Allí actualizamos
el tip, mostrando la hora actual (formato 'HH:MM:SS'). Todo esto en menos
de veinte líneas.

En este ejemplo el alto de la imagen es de 22 píxeles, un valor bastante
habitual para estos menesteres. En realidad se puede -se debería-
hacer que cambie con la altura del panel (ya que está es configurable
por el usuario), pero de momento no liemos la cosa. Al fin y al cabo,
applets oficiales de Gnome tienen imágenes de altura fija y todo el
mundo contento.

Podemos comprobar que todo va bien llamando al script desde línea de
comandos, sin ningún argumento; debería aparecer el applet en una pequeña
ventana como una aplicación normal y corriente. Más adelante veremos
cómo configurarlo como un applet de verdad, insertándolo en el panel.

Ejemplo 2: Asociando pulsaciones de ratón
-----------------------------------------

En el segundo ejemplo ('example2.py') añadimos algo más de interactividad:
establecemos las entradas del menú que deben aparecer al presionar el
botón derecho (en este caso, sólo el "Acerca de") y ligamos la pulsación
del primer botón al GUI de ajuste de fecha y hora ('time-admin') al hacer
un doble click (con lo que, almas de cántaro, estaremos violando la
patente 6.727.830 de Microsoft). Para esto último, conectamos la señal
'button_press_event' a un callback donde lanzamos el programa con el
módulo subprocess. Para evitar que el proceso quede zombie al finalizar,
recogemos la señal 'SIGCHLD' y leemos la última voluntad del finado (su
valor de retorno, mayormente)

Configurar Bonobo
-----------------

GNOME usa interfaces CORBA para la intercomunicación entre procesos. Como
parte de todo este conglomerado, la biblioteca Bonobo se encarga
de gestionar todo lo referente a los applets. En el directorio
'/usr/lib/bonobo/servers' cada applet deja su fichero de configuración
(con extensión '.server'), donde se detalla (en formato XML) el nombre,
descripción, ruta del ejecutable, el icono, etc. 

Como siempre, lo más sencillo es copiar uno ya existente y adaptarlo. Una vez pongáis
el fichero .server con la descripción de vuestra aplicación, ésta
debería aparecer en el GUI de adición de applets (a veces es necesario
reiniciar los demonios 'gnome-panel' y 'bonobo-activation-server' para que
se actualice).

Conclusión
----------

Lo visto aquí es sólo una pequeña muestra de lo que se puede hacer con
los applets en Gnome y PyGTK. Para profundizar en el tema os remitiría
a la documentación, en el caso que existiera... de momento no queda más
remedio que buscar en internet y ver cómo demonios lo usa la gente. 

El recurso de emergencia de inspeccionar el módulo directamente no sirve
en este caso, toda vez que 'gnomeapplet' está escrito directamente en
C. Sí, claro, podemos miraros el código fuente, pero entre nosotros,
tratar de entender algo a partir de un código C con el que no estamos
familiarizados *no* es trivial.

La clase 'GnomeApplet' que ilustra este artículo está en beta (siendo
generosos...), agradecería cualquier sugerencia, mejora o bug que
detectéis.
